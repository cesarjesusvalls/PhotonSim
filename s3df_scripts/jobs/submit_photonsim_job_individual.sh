#!/bin/bash
# Script to submit PhotonSim jobs to S3DF with individual photon storage enabled
# Usage: ./submit_photonsim_job_individual.sh -p <particle> -n <nevents> -e <energy> -o <output_dir> [-f <filename>]

# Default values
PARTICLE="mu-"
NEVENTS=10000
ENERGY=1000
OUTPUT_DIR=""
OUTPUT_FILE="output.root"

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PHOTONSIM_DIR="$( cd "${SCRIPT_DIR}/../.." && pwd )"
UTILS_DIR="${SCRIPT_DIR}/../utils"
USER_PATHS="${SCRIPT_DIR}/../user_paths.sh"

# Source user paths
if [ -f "${USER_PATHS}" ]; then
    source "${USER_PATHS}"
else
    echo "Error: user_paths.sh not found at ${USER_PATHS}"
    exit 1
fi

# Parse command line arguments
while getopts "p:n:e:o:f:h" opt; do
    case $opt in
        p) PARTICLE="$OPTARG";;
        n) NEVENTS="$OPTARG";;
        e) ENERGY="$OPTARG";;
        o) OUTPUT_DIR="$OPTARG";;
        f) OUTPUT_FILE="$OPTARG";;
        h) echo "Usage: $0 -p <particle> -n <nevents> -e <energy> -o <output_dir> [-f <filename>]"
           echo "  -p: Particle type (default: mu-)"
           echo "  -n: Number of events (default: 1000)"
           echo "  -e: Energy in MeV (default: 1000)"
           echo "  -o: Output directory (required)"
           echo "  -f: Output filename (default: output.root)"
           exit 0;;
        \?) echo "Invalid option -$OPTARG" >&2; exit 1;;
    esac
done

# Check required parameters
if [ -z "$OUTPUT_DIR" ]; then
    echo "Error: Output directory is required (-o option)"
    exit 1
fi

# Convert energy to integer for directory name
ENERGY_INT=$(printf "%.0f" $ENERGY)

# Create full output path following convention: output_dir/particle_type/energy/
FULL_OUTPUT_DIR="${OUTPUT_DIR}/${PARTICLE}/${ENERGY_INT}MeV"
echo "Creating output directory: ${FULL_OUTPUT_DIR}"
mkdir -p "${FULL_OUTPUT_DIR}"

# Create the macro file
MACRO_FILE="${FULL_OUTPUT_DIR}/run_${PARTICLE}_${ENERGY_INT}MeV_${NEVENTS}events_${OUTPUT_FILE%.root}.mac"
echo "Creating macro file: ${MACRO_FILE}"

cat > "${MACRO_FILE}" << EOF
# PhotonSim macro for ${PARTICLE} at ${ENERGY} MeV
# Generated by submit_photonsim_job_individual.sh
# Individual photon storage ENABLED

# Set output filename before initialization
/output/filename ${OUTPUT_FILE}

/run/initialize

# ENABLE individual photon/edep storage for event-by-event analysis
/photon/storeIndividual true
/edep/storeIndividual true

# Disable muon decay processes via macro commands
/particle/select mu-
/particle/process/inactivate 1
/particle/process/inactivate 7
/particle/select mu+
/particle/process/inactivate 1

# Disable pion decay processes via macro commands
/particle/select pi+
/particle/process/inactivate 1
/particle/select pi-
/particle/process/inactivate 1

# Set up primary particle with fixed energy
/gun/particle ${PARTICLE}
/gun/randomEnergy false
/gun/energy ${ENERGY} MeV
/gun/position 0 0 0 m
/gun/direction 0 0 1

# Run ${NEVENTS} events
/run/beamOn ${NEVENTS}
EOF

# Create the job execution script
JOB_SCRIPT="${FULL_OUTPUT_DIR}/run_photonsim_${OUTPUT_FILE%.root}.sh"
echo "Creating job script: ${JOB_SCRIPT}"

cat > "${JOB_SCRIPT}" << EOF
#!/bin/bash
# PhotonSim job execution script
# Generated by submit_photonsim_job_individual.sh

echo "Starting PhotonSim job (INDIVIDUAL PHOTON STORAGE ENABLED)"
echo "Particle: ${PARTICLE}"
echo "Energy: ${ENERGY} MeV"
echo "Events: ${NEVENTS}"
echo "Output: ${OUTPUT_FILE}"

# Source environment
source ${UTILS_DIR}/setup_environment.sh

# Change to output directory
cd ${FULL_OUTPUT_DIR}

# Run PhotonSim
echo "Running PhotonSim..."
${PHOTONSIM_DIR}/build/PhotonSim ${MACRO_FILE}

# Check if output file was created
if [ -f "${OUTPUT_FILE}" ]; then
    echo "Success! Output file created: ${OUTPUT_FILE}"
    ls -lh ${OUTPUT_FILE}
else
    echo "Error: Output file not created"
    exit 1
fi

echo "PhotonSim job completed"
EOF

chmod +x "${JOB_SCRIPT}"

# Create the SLURM submission script
SLURM_SCRIPT="${FULL_OUTPUT_DIR}/submit_job_${OUTPUT_FILE%.root}.sbatch"
echo "Creating SLURM submission script: ${SLURM_SCRIPT}"

# Create job name with particle, energy, and timestamp
JOB_NAME="photonsim_individual_${PARTICLE}_${ENERGY_INT}MeV_$(date +%Y%m%d_%H%M%S)"

cat > "${SLURM_SCRIPT}" << EOF
#!/bin/bash
#SBATCH --partition=${SLURM_PARTITION}
#SBATCH --account=${SLURM_ACCOUNT}
#
#SBATCH --job-name=${JOB_NAME}
#SBATCH --output=${FULL_OUTPUT_DIR}/job_${OUTPUT_FILE%.root}-%j.out
#SBATCH --error=${FULL_OUTPUT_DIR}/job_${OUTPUT_FILE%.root}-%j.err
#
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=${DEFAULT_CPUS}
#SBATCH --mem-per-cpu=${DEFAULT_MEMORY}
#
#SBATCH --time=${DEFAULT_TIME}

echo "SLURM Job ID: \${SLURM_JOB_ID}"
echo "Job started at: \$(date)"
echo "Running on node: \$(hostname)"
echo "Working directory: \$(pwd)"

# Execute the job script
${JOB_SCRIPT}

echo "Job ended at: \$(date)"
EOF

chmod +x "${SLURM_SCRIPT}"

# Summary
echo ""
echo "=== Job preparation complete ==="
echo "Output directory: ${FULL_OUTPUT_DIR}"
echo "Macro file: ${MACRO_FILE}"
echo "Job script: ${JOB_SCRIPT}"
echo "SLURM script: ${SLURM_SCRIPT}"
echo ""
echo "To submit this job, run:"
echo "  sbatch ${SLURM_SCRIPT}"
echo ""
echo "To test locally first, run:"
echo "  ${JOB_SCRIPT}"
